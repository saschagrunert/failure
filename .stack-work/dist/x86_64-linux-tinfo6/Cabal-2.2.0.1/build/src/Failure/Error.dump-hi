
==================== FINAL INTERFACE ====================
2018-08-17 16:28:36.950202737 UTC

interface failure-0.1.0-DtEio5zznTq46sCCwsuI3F:Failure.Error 8043
  interface hash: c88142fd473a58499271fb9615db7799
  ABI hash: 273dbfda6a235cdcc6121c1fca598369
  export-list hash: 65fde95302d17d5710f536e104a6d644
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 9a376849dd7912ee14016708a0582a40
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: True
  where
exports:
  Failure.Error.code
  Failure.Error.description
  Failure.Error.err
  Failure.Error.errAppend
  Failure.Error.nextCause
  Failure.Error.Code
  Failure.Error.Error
module dependencies: Failure.Fail
package dependencies: StateVar-1.1.1.0 adjunctions-4.4
                      array-0.5.2.0 base-4.11.1.0 base-orphans-0.7 bifunctors-5.5.3
                      binary-0.8.5.1 bytestring-0.10.8.2 call-stack-0.1.0 comonad-5.0.4
                      containers-0.5.11.0 contravariant-1.4.1 deepseq-1.4.3.0
                      distributive-0.5.3 exceptions-0.10.0 free-5.0.2 ghc-boot-th-8.4.3
                      ghc-prim-0.5.2.0 hashable-1.2.7.0 integer-gmp-1.0.2.0
                      kan-extensions-5.2 lens-4.16.1 mtl-2.2.2 pretty-1.1.3.6
                      primitive-0.6.3.0 profunctors-5.2.2 reflection-2.1.4
                      semigroupoids-5.2.2 stm-2.4.5.0 tagged-0.8.5
                      template-haskell-2.13.0.0 text-1.2.3.0 th-abstraction-0.2.8.0
                      transformers-0.5.5.0 transformers-base-0.4.5.2
                      transformers-compat-0.6.2 unordered-containers-0.2.9.0
                      vector-0.12.0.1
orphans: reflection-2.1.4:Data.Reflection
         vector-0.12.0.1:Data.Vector.Unboxed
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show
         transformers-0.5.5.0:Control.Monad.Trans.Error
         stm-2.4.5.0:Control.Monad.STM base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: adjunctions-4.4:Data.Functor.Rep
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         bifunctors-5.5.3:Data.Bifunctor.Biff
                         bifunctors-5.5.3:Data.Bifunctor.Clown
                         bifunctors-5.5.3:Data.Bifunctor.Fix
                         bifunctors-5.5.3:Data.Bifunctor.Flip
                         bifunctors-5.5.3:Data.Bifunctor.Join
                         bifunctors-5.5.3:Data.Bifunctor.Joker
                         bifunctors-5.5.3:Data.Bifunctor.Product
                         bifunctors-5.5.3:Data.Bifunctor.Sum
                         bifunctors-5.5.3:Data.Bifunctor.Tannen
                         bifunctors-5.5.3:Data.Bifunctor.Wrapped
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         free-5.0.2:Control.Comonad.Cofree
                         free-5.0.2:Control.Comonad.Trans.Cofree
                         free-5.0.2:Control.Monad.Free free-5.0.2:Control.Monad.Trans.Free
                         ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         kan-extensions-5.2:Data.Functor.Day
                         kan-extensions-5.2:Data.Functor.Yoneda lens-4.16.1:Control.Lens.At
                         lens-4.16.1:Control.Lens.Internal.Indexed
                         lens-4.16.1:Control.Lens.Reified lens-4.16.1:Control.Lens.Tuple
                         lens-4.16.1:Control.Lens.Wrapped lens-4.16.1:Control.Lens.Zoom
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         profunctors-5.2.2:Data.Profunctor.Composition
                         profunctors-5.2.2:Data.Profunctor.Rep tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  base-4.11.1.0:Text.Printf 115e6d1593f02cf01fd99a33fbd64b81
import  -/  Failure.Fail 17708d7f3da1a9c5c438afacc41f63bc
  exports: 0453512894927988080edeac47583db7
  Fail 5b184518ec3b63c7d7dc4d2cc7bcfb49
  backtrace e7cbb4f382346ede954739705905ef14
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  integer-gmp-1.0.2.0:GHC.Integer.Type f3d5169c3d3830854b19f6565b265403
import  -/  lens-4.16.1:Control.Lens 74f9a8885c5d40f3b3d9097334fae774
import  -/  lens-4.16.1:Control.Lens.Getter 98940188513d6036aa75161652b08bda
import  -/  lens-4.16.1:Control.Lens.TH 85654979c5808c531fa7b507d41372ac
import  -/  lens-4.16.1:Control.Lens.Type 843fce5738c99b8a525afb4b58a0f841
98f48027c8aeed4f6b4df32eff0ccbc7
  $fEqError :: GHC.Classes.Eq (Failure.Error.Error a)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a.
                  @ (Failure.Error.Error a)
                  (Failure.Error.$fEqError_$c== @ a)
                  (Failure.Error.$fEqError_$c/= @ a) -}
98f48027c8aeed4f6b4df32eff0ccbc7
  $fEqError_$c/= ::
    Failure.Error.Error a -> Failure.Error.Error a -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U,1*U,1*U)><S(SLL),1*U(1*U,1*U,1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ a (x :: Failure.Error.Error a) (y :: Failure.Error.Error a) ->
                 case Failure.Error.$fEqError_$c== @ a x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
98f48027c8aeed4f6b4df32eff0ccbc7
  $fEqError_$c== ::
    Failure.Error.Error a -> Failure.Error.Error a -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U,1*U,1*U)><S(SLL),1*U(1*U,1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (w :: Failure.Error.Error a)
                   (w1 :: Failure.Error.Error a) ->
                 case w of ww { Failure.Error.Error ww1 ww2 ww3 ->
                 case w1 of ww4 { Failure.Error.Error ww5 ww6 ww7 ->
                 Failure.Error.$w$c== @ a ww1 ww2 ww3 ww5 ww6 ww7 } }) -}
98f48027c8aeed4f6b4df32eff0ccbc7
  $fFailError :: Failure.Fail.Fail (Failure.Error.Error a)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a.
                  @ (Failure.Error.Error a)
                  (Failure.Error.$fFailError_$cbacktrace @ a)
                  (Failure.Error.$fFailError1 @ a)
                    `cast`
                  (<Failure.Error.Error a>_R
                   ->_R Data.Functor.Const.N:Const[0]
                            <*>_N
                            <GHC.Base.Maybe (Failure.Error.Error a)>_R
                            <Failure.Error.Error a>_P) -}
98f48027c8aeed4f6b4df32eff0ccbc7
  $fFailError1 ::
    Failure.Error.Error a
    -> Data.Functor.Const.Const
         (GHC.Base.Maybe (Failure.Error.Error a)) (Failure.Error.Error a)
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (a1 :: Failure.Error.Error a) ->
                 case a1 of wild { Failure.Error.Error x1 x2 x3 ->
                 x3
                   `cast`
                 (Sym (Data.Functor.Const.N:Const[0]
                           <*>_N
                           <GHC.Base.Maybe (Failure.Error.Error a)>_R
                           <Failure.Error.Error a>_P)) }) -}
98f48027c8aeed4f6b4df32eff0ccbc7
  $fFailError_$cbacktrace ::
    Failure.Error.Error a -> [Failure.Error.Error a]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(U,U,1*U)>m2,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a (w :: Failure.Error.Error a) ->
                 case w of ww { Failure.Error.Error ww1 ww2 ww3 ->
                 case Failure.Error.$w$cbacktrace
                        @ a
                        ww1
                        ww2
                        ww3 of ww4 { (#,#) ww5 ww6 ->
                 GHC.Types.: @ (Failure.Error.Error a) ww5 ww6 } }) -}
98f48027c8aeed4f6b4df32eff0ccbc7
  $fShowError :: GHC.Show.Show (Failure.Error.Error a)
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a.
                  @ (Failure.Error.Error a)
                  (Failure.Error.$fShowError_$cshowsPrec @ a)
                  (Failure.Error.$fShowError_$cshow @ a)
                  (Failure.Error.$fShowError_$cshowList @ a) -}
98f48027c8aeed4f6b4df32eff0ccbc7
  $fShowError1 ::
    Failure.Error.Error a -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S(LLS),1*U(U,U,1*U)><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (x :: Failure.Error.Error a)
                   (s :: GHC.Base.String)[OneShot] ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (Failure.Error.$fShowError_$cshow @ a x))
                   s) -}
98f48027c8aeed4f6b4df32eff0ccbc7
  $fShowError_$cshow :: Failure.Error.Error a -> GHC.Base.String
  {- Arity: 1, Strictness: <S(LLS),1*U(U,U,1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a (w :: Failure.Error.Error a) ->
                 case w of ww { Failure.Error.Error ww1 ww2 ww3 ->
                 Failure.Error.$w$cshow @ a ww1 ww2 ww3 }) -}
98f48027c8aeed4f6b4df32eff0ccbc7
  $fShowError_$cshowList :: [Failure.Error.Error a] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (ls :: [Failure.Error.Error a]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Failure.Error.Error a)
                   (Failure.Error.$fShowError1 @ a)
                   ls
                   s) -}
98f48027c8aeed4f6b4df32eff0ccbc7
  $fShowError_$cshowsPrec ::
    GHC.Types.Int -> Failure.Error.Error a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S(LLS),1*U(U,U,1*U)><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (ds :: GHC.Types.Int)
                   (x :: Failure.Error.Error a)
                   (s :: GHC.Base.String) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (Failure.Error.$fShowError_$cshow @ a x))
                   s) -}
bfbd62c7125ca713708b16ad23f586ea
  $tc'Error :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7820906989950724254##
                   404640021598724678##
                   Failure.Error.$trModule
                   Failure.Error.$tc'Error2
                   1#
                   Failure.Error.$tc'Error1) -}
8193e860798c21fa042425e68e497877
  $tc'Error1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
f50496932deba50be518a1de5b936dc0
  $tc'Error2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Failure.Error.$tc'Error3) -}
b0719090b07ca0b6aa465c72213e1cb1
  $tc'Error3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Error"#) -}
d86e0799e289c11a50b7d5e078099af5
  $tcError :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10669536541793793776##
                   8632478277263021933##
                   Failure.Error.$trModule
                   Failure.Error.$tcError1
                   0#
                   GHC.Types.krep$*Arr*) -}
df895c77753426d00d2268eab1c7e34f
  $tcError1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Failure.Error.$tcError2) -}
f183e29b9ea7f81cecdf7ab747187812
  $tcError2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Error"#) -}
371a0521f767084080ed81091cb3a606
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Failure.Error.$trModule3
                   Failure.Error.$trModule1) -}
a999ac8a2ec84978b8bab08e0a172e27
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Failure.Error.$trModule2) -}
2c208155dbc4a16a14c82910cdceadb9
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Failure.Error"#) -}
e13a11ec170d75762aebc0a54e87da60
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Failure.Error.$trModule4) -}
ca5d6514f2ae7d949f585541ed2b95a7
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("failure-0.1.0-DtEio5zznTq46sCCwsuI3F"#) -}
98f48027c8aeed4f6b4df32eff0ccbc7
  $w$c== ::
    Failure.Error.Code
    -> GHC.Base.String
    -> GHC.Base.Maybe (Failure.Error.Error a)
    -> Failure.Error.Code
    -> GHC.Base.String
    -> GHC.Base.Maybe (Failure.Error.Error a)
    -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U>,
     Inline: [0] -}
98f48027c8aeed4f6b4df32eff0ccbc7
  $w$cbacktrace ::
    Failure.Error.Code
    -> GHC.Base.String
    -> GHC.Base.Maybe (Failure.Error.Error a)
    -> (# Failure.Error.Error a, [Failure.Error.Error a] #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><S,1*U>,
     Inline: [0] -}
98f48027c8aeed4f6b4df32eff0ccbc7
  $w$cshow ::
    Failure.Error.Code
    -> GHC.Base.String
    -> GHC.Base.Maybe (Failure.Error.Error a)
    -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U>, Inline: [0] -}
adf423671d1bb85c0ad3de63301261f7
  type Code = GHC.Integer.Type.Integer
98f48027c8aeed4f6b4df32eff0ccbc7
  type role Error phantom
  data Error a
    = Error {_code :: Failure.Error.Code,
             _description :: GHC.Base.String,
             _nextCause :: GHC.Base.Maybe (Failure.Error.Error a)}
98f48027c8aeed4f6b4df32eff0ccbc7
  _code :: Failure.Error.Error a -> Failure.Error.Code
  RecSel Left Failure.Error.Error
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Failure.Error.Error a) ->
                 case ds of wild { Failure.Error.Error ds1 ds2 ds3 -> ds1 }) -}
98f48027c8aeed4f6b4df32eff0ccbc7
  _description :: Failure.Error.Error a -> GHC.Base.String
  RecSel Left Failure.Error.Error
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Failure.Error.Error a) ->
                 case ds of wild { Failure.Error.Error ds1 ds2 ds3 -> ds2 }) -}
98f48027c8aeed4f6b4df32eff0ccbc7
  _nextCause ::
    Failure.Error.Error a -> GHC.Base.Maybe (Failure.Error.Error a)
  RecSel Left Failure.Error.Error
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Failure.Error.Error a) ->
                 case ds of wild { Failure.Error.Error ds1 ds2 ds3 -> ds3 }) -}
efeaea23ea3b49ee07265ac735b8d3b1
  code ::
    Control.Lens.Type.Lens' (Failure.Error.Error a) Failure.Error.Code
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ a
                   @ f :: * -> *
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: Failure.Error.Code -> f Failure.Error.Code)
                   (ds :: Failure.Error.Error a) ->
                 case ds of wild { Failure.Error.Error x1 x2 x3 ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ Failure.Error.Code
                   @ (Failure.Error.Error a)
                   (\ (y1 :: Failure.Error.Code) -> Failure.Error.Error @ a y1 x2 x3)
                   (f1 x1) }) -}
73591145c33b18b8f28fd717ee3817dc
  description ::
    Control.Lens.Type.Lens' (Failure.Error.Error a) GHC.Base.String
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ a
                   @ f :: * -> *
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: GHC.Base.String -> f GHC.Base.String)
                   (ds :: Failure.Error.Error a) ->
                 case ds of wild { Failure.Error.Error x1 x2 x3 ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ GHC.Base.String
                   @ (Failure.Error.Error a)
                   (\ (y1 :: GHC.Base.String) -> Failure.Error.Error @ a x1 y1 x3)
                   (f1 x2) }) -}
ec51a7e5115928b703e01062de487687
  err ::
    Failure.Error.Code -> GHC.Base.String -> Failure.Error.Error a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (d :: Failure.Error.Code) (e :: GHC.Base.String) ->
                 Failure.Error.Error
                   @ a
                   d
                   e
                   (GHC.Base.Nothing @ (Failure.Error.Error a))) -}
578de626816213d57c941627f1b65aa1
  errAppend ::
    Failure.Error.Error a
    -> Failure.Error.Code -> GHC.Base.String -> Failure.Error.Error a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><L,U>m,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (c :: Failure.Error.Error a)
                   (eta :: Failure.Error.Code)
                   (eta1 :: GHC.Base.String) ->
                 Failure.Error.Error
                   @ a
                   eta
                   eta1
                   (GHC.Base.Just @ (Failure.Error.Error a) c)) -}
56616e7ad90bdcc10d5360ccb79fe2ed
  nextCause ::
    Control.Lens.Type.Lens
      (Failure.Error.Error a1)
      (Failure.Error.Error a2)
      (GHC.Base.Maybe (Failure.Error.Error a1))
      (GHC.Base.Maybe (Failure.Error.Error a2))
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ a
                   @ a1
                   @ f :: * -> *
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: GHC.Base.Maybe (Failure.Error.Error a)
                          -> f (GHC.Base.Maybe (Failure.Error.Error a1)))
                   (ds :: Failure.Error.Error a) ->
                 case ds of wild { Failure.Error.Error x1 x2 x3 ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ (GHC.Base.Maybe (Failure.Error.Error a1))
                   @ (Failure.Error.Error a1)
                   (\ (y1 :: GHC.Base.Maybe (Failure.Error.Error a1)) ->
                    Failure.Error.Error @ a1 x1 x2 y1)
                   (f1 x3) }) -}
instance GHC.Classes.Eq [Failure.Error.Error]
  = Failure.Error.$fEqError
instance Failure.Fail.Fail [Failure.Error.Error]
  = Failure.Error.$fFailError
instance GHC.Show.Show [Failure.Error.Error]
  = Failure.Error.$fShowError
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

