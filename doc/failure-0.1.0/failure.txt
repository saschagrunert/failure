-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Short description of your package
--   
--   Please see the README on GitHub at
--   <a>https://github.com/saschagrunert/failure#readme</a>
@package failure
@version 0.1.0


-- | The interface for Fail types
module Failure.Fail

-- | The main class of Fails.
--   
--   Types which implement <a>Fail</a> are called failures.
--   
--   <a>backtrace</a> evaluates to the ordered list of failures
--   
--   <a>cause</a> returns the underlying cause of this failure, if it is an
--   error that wraps other errors. Returns <a>Nothing</a> if this failure
--   does not have another error as its underlying cause.
--   
--   <a>+&gt;</a> adds an Error to the chain. This sets the seconds error
--   cause to the first one and prepends it therefore to the overall
--   error-chain.
class Fail a
backtrace :: Fail a => a -> [a]
cause :: Fail a => a -> Maybe a
(+>) :: Fail a => a -> a -> a


-- | Concrete Error types
module Failure.Error

-- | The Either type for Error
type EitherE a b = Either (Error a) b

-- | The concrete error type
data Error a
code :: forall a_a6Nu. Lens' (Error a_a6Nu) a_a6Nu
description :: forall a_a6Nu. Lens' (Error a_a6Nu) String

-- | This is a convenient way to turn a string into an error value that can
--   be passed around, if you do not want to create a new Fail type for
--   this use case.
err :: a -> String -> Error a
nextCause :: forall a_a6Nu. Lens' (Error a_a6Nu) (Maybe (Error a_a6Nu))
instance GHC.Show.Show a => GHC.Show.Show (Failure.Error.Error a)
instance Failure.Fail.Fail (Failure.Error.Error a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (Failure.Error.Error a)
