-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Short description of your package
--   
--   Please see the README on GitHub at
--   <a>https://github.com/saschagrunert/failure#readme</a>
@package failure
@version 0.1.0


-- | The interface for Fail types
module Failure.Fail

-- | The main class of Fails.
--   
--   Types which implement <a>Fail</a> are called failures.
--   
--   <a>backtrace</a> evaluates to the ordered list of failures
--   
--   <a>cause</a> returns the underlying cause of this failure, if it is an
--   error that wraps other errors. Returns <a>Nothing</a> if this failure
--   does not have another error as its underlying cause.
class Fail a
backtrace :: Fail a => a -> [a]
cause :: Fail a => a -> Maybe a


-- | Concrete Error types
module Failure.Error

-- | Simple error code to integer representation
type Code = Integer

-- | The concrete error type
data Error a
code :: forall a_a6LG. Lens' (Error a_a6LG) Code
description :: forall a_a6LG. Lens' (Error a_a6LG) String

-- | This is a convenient way to turn a string into an error value that can
--   be passed around, if you do not want to create a new Fail type for
--   this use case.
err :: Code -> String -> Error a

-- | Append an error to the chain with a given description
errAppend :: Error a -> Code -> String -> Error a
nextCause :: forall a_a6LG a_aacK. Lens (Error a_a6LG) (Error a_aacK) (Maybe (Error a_a6LG)) (Maybe (Error a_aacK))
instance GHC.Show.Show (Failure.Error.Error a)
instance Failure.Fail.Fail (Failure.Error.Error a)
instance GHC.Classes.Eq (Failure.Error.Error a)
